# -*- coding: utf-8 -*-
"""notes2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tuzZzi030k0uV6vWBNwkgfthQdOnobDW
"""

import numpy

octaves = ['Субконтроктава', 'Контроктава', 'Большая октава', 'Малая октава', 'Первая октава', 'Вторая октава', 'Третья октава', 'Четвертая октава', 'Пятая октава']
notes7 = ['До', 'Ре', 'Ми', 'Фа', 'Соль', 'Ля', 'Си']
notes12 = ['До', 'До-диез', 'Ре', 'Ре-диез', 'Ми', 'Фа', 'Фа-диез', 'Соль', 'Соль-диез', 'Ля', 'Ля-диез', 'Си']
notes7_dict = {
          'до': 1,
          'ре': 2,
          'ми': 3,
          'фа': 4,
          'соль': 5,
          'ля': 6,
          'си': 7,
}


def make_freq():
    freq_7 = numpy.array([])
    freq_12 = numpy.array([])
    f0 = 440
    n0 = 58
    n = 108

    for i in range(n):
        k = i + 1 - n0
        m = i + 1
        note = round(440 * 2 ** (k/12), 1)
        if ((m % 12 != 2) and (m % 12 != 4) and (m % 12 != 7) and (m % 12 != 9) and (m % 12 != 11)):
            freq_7 = numpy.append(freq_7, note)
        freq_12 = numpy.append(freq_12, note)

    freq_7 = freq_7.reshape(9,7)
    freq_12 = freq_12.reshape(9,12)

    return freq_7, freq_12


def pause(time, sample_rate=44100):
    s_r = sample_rate
    len = int(time * s_r)
    x = numpy.zeros(len)

    return x, s_r


def gen_note(octave, note, system = 0, duration = 0.1, sample_rate = 44100, amp = 1000, offset = 0):

    freq_7, freq_12 = make_freq()

    if system == 0:
       freq = freq_7[octave, note-1]
    else:
       freq = freq_12[octave, note-1]
    N = round(duration*sample_rate)
    ts = numpy.arange(N)/sample_rate
    ys = amp*numpy.sin(2*numpy.pi*freq*ts + offset)
    ys = ys.astype(numpy.int16)

    return ys, sample_rate


def choise_note(time=1, sample_rate=44100):

    oct = int(input("""Введите номер октавы
          0 - для Субконтроктавы
          1 - для Контроктавы
          2 - для Малой октавы
          3 - для Большой октавы
          4 - для Первой октавы
          5 - для Второй октавы
          6 - для Третьей октавы
          7 - для Четвертой октавы
          8 - для Пятой октавы.
          Ваш номер октавы: """))

    print('\n')

    note = input("""Введите название ноты (до, ре, ми, фа, соль, ля, си).
          Ваша нота:  """)

    if note.lower() in notes7_dict.keys():
       n = notes7_dict[note.lower()]
    else:
       n = 1
       print('Такой ноты не существует, поэтому выберем ноту "до"')

    print('\n')

    x, s_r = gen_note(oct, n, duration = time, sample_rate=sample_rate)

    return x, s_r


def listnotes(notes, time=0.5, sample_rate=44100):

    music = numpy.array([])

    for i in range(len(notes)):
          oct = notes[i][0]
          note = notes[i][1]
          if note.lower() in notes7_dict.keys():
             note = notes7_dict[note.lower()]
          else:
             print('Такой ноты не существует, поэтому выберем ноту "до"')
             note = 1

          x, s_r = gen_note(oct, note, duration = time, sample_rate=sample_rate)
          music = numpy.append(music, x, axis = 0)

    return music, s_r


def gamma_up(octave, note, time = 0.5, sample_rate=44100):

    intervals = time
    notes = []

    note = note.lower()

    if note in notes7_dict.keys():
       n = notes7_dict[note]
       oct = octave
       for i in range(8):
           notes.append((oct, note))
           n += 1
           if n > 7:
              oct += 1
              n = n % 7
           note = notes7[n-1].lower()
    else:
         print('Такой ноты не существует')

    x, s_r =  listnotes(notes, time = intervals, sample_rate=sample_rate)

    return x, s_r


def gamma_down(octave, note, time = 0.5, sample_rate=44100):

    intervals = time
    notes = []

    note = note.lower()

    if note in notes7_dict.keys():
       n = notes7_dict[note]
       oct = octave
       for i in range(8):
           notes.append((oct, note))
           n -= 1
           if n < 1:
              oct -= 1
              n = 7
           note = notes7[n-1].lower()
    else:
         print('Такой ноты не существует')

    x, s_r =  listnotes(notes, time = intervals, sample_rate=sample_rate)

    return x, s_r


def gamma_updown(octave, note, time = 0.5, sample_rate=44100):

    oct = octave
    note = note
    interval = time
    s_r = sample_rate

    x_up, s_r = gamma_up(oct, note, interval, s_r)
    x_down, s_r = gamma_down(oct+1, note, interval, s_r)

    x = numpy.append(x_up, x_down, axis = 0)

    return x, s_r


def gamma_downup(octave, note, time = 0.5, sample_rate=44100):

    oct = octave
    note = note
    interval = time
    s_r = sample_rate

    x_down, s_r = gamma_down(oct, note, interval, s_r)
    x_up, s_r = gamma_up(oct-1, note, interval, s_r)

    x = numpy.append(x_down, x_up, axis = 0)

    return x, s_r


def link_sound(x, y, sample_rate=44100):
    z = numpy.append(x, y, axis = 0)
    return z, sample_rate